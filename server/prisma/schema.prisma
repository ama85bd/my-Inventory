// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CompanyPayment {
  id          String   @id @default(uuid()) @db.Uuid
  companyId   String   @db.Uuid
  amount      Float
  isPaid      Boolean  @default(false)
  paidAt      DateTime?
  paymentMethod String? // e.g. "card", "bank_transfer"
  transactionId String? // optional external payment reference
  note        String?
  isDeleted Boolean @default(false)
  deletedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  company     Companies @relation(fields: [companyId], references: [id])

  @@unique([companyId])
}

model Users{
  id    String @unique @id @default(uuid()) @db.Uuid
  firstname String
  lastname String?
  phone String
  email String @unique
  username String @unique
  gender String?
  image String?
  password String
  companyId  String @db.Uuid
  userGroupId  String @db.Uuid
  isDeleted Boolean @default(false)
  deletedAt DateTime?
  createAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  company Companies @relation(fields: [companyId], references: [id])
  updatedPermissionGroups PermissionGroup[] @relation("PermissionGroupUpdatedBy")
  userGroup UserGroup @relation(fields: [userGroupId], references: [id])
  userSession UserSession[]
}


model Companies{
  id    String @unique @id @default(uuid()) @db.Uuid
  name String
  address String
  type String
  phone String
  country String
  chargeAmount Float?
  vatAmount Float?
  email String @unique
  currency String 
  password String
  username String @unique
  isActive  Boolean @default(false)
  image String?
  createAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean @default(false)
  deletedAt DateTime?
  permissionGroup PermissionGroup[]
  users Users[]
  userGroup UserGroup[]
  payments CompanyPayment[]
}

model PermissionGroup{
  id    String @unique @id @default(uuid()) @db.Uuid
  name String
  isView  Boolean @default(false)
  isCreate  Boolean @default(false)
  isUpdate  Boolean @default(false)
  isDelete  Boolean @default(false)
  updateBy  String? @db.Uuid
  companyId  String @db.Uuid
  isDeleted Boolean @default(false)
  deletedAt DateTime?
  createAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  company Companies @relation(fields: [companyId], references: [id])
  updatedByUser Users? @relation("PermissionGroupUpdatedBy", fields: [updateBy], references: [id])
  userGroups PermissionGroupOnUserGroups[]
}

model UserGroup{
  id    String @unique @id @default(uuid()) @db.Uuid
  name String
  companyId  String @db.Uuid
  createAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean @default(false)
  deletedAt DateTime?
  company Companies @relation(fields: [companyId], references: [id])
  users Users[]
  permissions PermissionGroupOnUserGroups[]
  @@unique([companyId, name])  // ðŸ‘ˆ This line ensures name is unique **inside** a company
}


model PermissionGroupOnUserGroups {
  id               String    @unique @id @default(uuid()) @db.Uuid
  userGroupId      String @db.Uuid
  permissionGroupId String @db.Uuid

  userGroup       UserGroup @relation(fields: [userGroupId], references: [id])
  permissionGroup PermissionGroup @relation(fields: [permissionGroupId], references: [id])

  @@unique([userGroupId, permissionGroupId])
}



model UserSession {
  id          String   @id @default(uuid()) @db.Uuid
  userId   String   @db.Uuid
  userAgent   String  
  isValid  Boolean @default(false)
  isDeleted Boolean @default(false)
  deletedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user     Users @relation(fields: [userId], references: [id])
}
